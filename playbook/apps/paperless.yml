---

- hosts: staging-oltech

  vars:
    application: paperless-ngx

    docker_network: staging

    paperless_password: !vault |
      $ANSIBLE_VAULT;1.1;AES256
      35373065393066383962393065333662393665353730316135356264386365313361343737313533
      3838623931363635366564636363326138313962383465390a616333303533393533346332666363
      32343165386438366463623633623461613635663932363062656430353764653532346234623661
      3731386230646133380a336161363261363365366364393261613931363164353832383461313935
      32313538646465313030393965643634373561666363616661333037373361346465

    paperless_admin_password: !vault |
      $ANSIBLE_VAULT;1.1;AES256
      36356431616234633733636231353464303966323332313062356337306230653739323538633965
      6337373733656237343035656631326434383131366330300a336433386437343033656163663634
      38353634333636376461643638343136373831663933333165623133353662343261363739613061
      3963393065393630660a396664356636363138333533616531366336316638313234626234316130
      61366263326339323061353037623263383533613034386465343766613065633539313961616136
      3137313235346232376664386230303236303333623565646462
      

  tasks:
    - name: Create config directory
      ansible.builtin.file:
        path: "{{ config_directory }}"
        state: directory
        owner: "{{ common_user_id }}"
        group: "{{ common_group_id }}"
        mode: "0750"

    - name: Create {{ application }}-redis container
      community.docker.docker_container:
        name: "{{ application }}-redis"
        image: docker.io/library/redis:7
        restart_policy: unless-stopped
        volumes:
          - "{{ config_directory }}/database:/var/lib/mysql"
        networks:
          - name: "{{ docker_network }}"

    # - name: Create {{ application }}-mariadb container
    #   community.docker.docker_container:
    #     name: "{{ application }}-mariadb"
    #     image: docker.io/library/mariadb:10
    #     restart_policy: unless-stopped
    #     volumes:
    #       - "{{ config_directory }}/redis:/data"
    #     env:
    #       MARIADB_HOST: paperless
    #       MARIADB_DATABASE: paperless
    #       MARIADB_USER: paperless
    #       MARIADB_PASSWORD: "{{ paperless_password }}"
    #       MARIADB_ROOT_PASSWORD: "{{ paperless_password }}"
    #     networks:
    #       - name: "{{ docker_network }}"

    - name: Create tika container
      community.docker.docker_container:
        name: "{{ application }}-tika"
        image: apache/tika:2.9.0.0
        state: started
        restart_policy: unless-stopped
        networks:
          - name: "{{ docker_network }}"
        
    - name: Create gotenberg container
      community.docker.docker_container:
        name: "{{ application }}-gotenberg"
        image: gotenberg/gotenberg:7.9.1
        state: started
        restart_policy: unless-stopped
        networks:
          - name: "{{ docker_network }}"
        command:
          - "gotenberg"
          - "--chromium-disable-javascript=true"
          - "--chromium-allow-list=file:///tmp/.*" 
        

    - name: Create webserver container
      community.docker.docker_container:
        name: "{{ application }}"
        image: ghcr.io/paperless-ngx/paperless-ngx:1.17.4
        state: started
        restart_policy: unless-stopped
        volumes:
          - "{{ config_directory }}/data:/usr/src/paperless/data"
          - "{{ config_directory }}/media:/usr/src/paperless/media"
          - "{{ config_directory }}/export:/usr/src/paperless/export"
          - "{{ config_directory }}/consume:/usr/src/paperless/consume"
        published_ports:
          - "8555:8000"
        healthcheck:
          test: ["CMD", "curl", "-f", "http://localhost:8000"]
          interval: 30s
          timeout: 10s
          retries: 5
        env:
          PAPERLESS_FILENAME_FORMAT: "{created}-{correspondent}-{title}"

          PAPERLESS_REDIS: "redis://{{ application }}-redis:6379"

          PAPERLESS_DBENGINE: "mariadb"
          PAPERLESS_DBHOST: "mariadb"
          PAPERLESS_DBPORT: "{{ 3306 | string }}"
          PAPERLESS_DBUSER: paperless
          PAPERLESS_DBPASS: "{{ paperless_password }}"
          PAPERLESS_DBSSLMODE: "PREFERRED"

          USERMAP_UID: "{{ common_user_id | string }}"
          USERMAP_GID: "{{ common_group_id | string }}"

          PAPERLESS_OCR_LANGUAGE: "eng"
          PAPERLESS_TIME_ZONE: "{{ common_timezone }}"
          PAPERLESS_SECRET_KEY: !vault |
            $ANSIBLE_VAULT;1.1;AES256
            31333535663032343031643764303737303561343733343362373431626464663230303935343463
            3430303966646234363938633134386165343163303966330a653037393137363232346164313530
            66303331636132613530656261373637613566303032633261353034656566616162386231313765
            3064613434376439300a366438393763376565366337656466383339303938646639633434363635
            62396133626266303133373265383930643639656535633665306239323430653561376465623039
            3363373236336330633933323836613635353237653938356533

          PAPERLESS_URL: "https://{{ application }}.{{ common_tld }}"
          PAPERLESS_CSRF_TRUSTED_ORIGINS: "https://{{ application }}.{{ common_tld }}"
          PAPERLESS_ALLOWED_HOSTS: "https://{{ application }}.{{ common_tld }}"
          PAPERLESS_CORS_ALLOWED_HOSTS: "https://{{ application }}.{{ common_tld }}"

          PAPERLESS_TIKA_ENABLED: "true"
          PAPERLESS_TIKA_ENDPOINT: "http://{{ application }}-tika:9998"
          PAPERLESS_TIKA_GOTENBERG_ENDPOINT: "http://{{ application }}-gotenberg:3000"

          PAPERLESS_LOGROTATE_MAX_BACKUPS: "2"

        networks:
          - name: "{{ docker_network }}"


    - name: Wait for paperless to be ready
      ansible.builtin.wait_for:
        timeout: 30

    - name: Create application user
      community.docker.docker_container_exec:
        container: "{{ application }}"
        command: /bin/bash -c "DJANGO_SUPERUSER_PASSWORD={{ paperless_admin_password }} python3 manage.py createsuperuser --username {{ common_user }} --email {{ application }}{{ common_email_to }} --noinput"
      register: command_result
      changed_when: "'Superuser created successfully' in command_result.stdout"
      failed_when: ('Superuser created successfully' not in command_result.stdout) and ('That username is already taken' not in command_result.stderr)