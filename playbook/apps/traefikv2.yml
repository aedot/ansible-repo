---

- hosts: 

  vars:
    application: traefik
    docker_network: 

  handlers:
    - name: Restart
      community.docker.docker_container:
        name: "{{ application }}"
        restart: true
        comparisons:
          '*': ignore

  tasks:
    - name: Create config folder
      ansible.builtin.file:
        path: "{{ config_directory }}"
        state: directory
        owner: "{{ common_user }}"
        group: "{{ common_group }}"
        mode: "0755"

    - name: Create acme.json
      ansible.builtin.file:
        path: "{{ config_directory }}/acme.json"
        state: touch
        mode: "0600"
        modification_time: "preserve"
        access_time: "preserve"

    - name: Template traefik configs
      ansible.builtin.template:
        src: "{{ files_directory }}/{{ item }}.j2"
        dest: "{{ config_directory }}/{{ item }}"
        mode: "0644"
      loop:
        - traefik.yaml
        - dynamic_conf.yaml
      notify: Restart

    # https://github.com/quic-go/quic-go/wiki/UDP-Receive-Buffer-Size
    - name: Increase UDP receive buffer size
      ansible.posix.sysctl:
        name: net.core.rmem_max
        value: '2500000'
        state: present

    - name: Create container
      community.docker.docker_container:
        name: "{{ application }}"
        image: traefik:v2.10.3
        state: started
        restart_policy: always
        env:
          CF_API_EMAIL: "{{ cloudflare_email }}"
          CF_DNS_API_TOKEN: "{{ cloudflare_dns_api }}"
          TZ: "{{ common_timezone }}"
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock:ro
          - /var/log/crowdsec/:/var/log/crowdsec/

          - "{{ config_directory }}:/etc/traefik/"
        labels:
          traefik.enable: "true"
          traefik.http.routers.api.entryPoints: "https" 
          traefik.http.routers.api.service: "api@internal"
          traefik.http.routers.api.rule: "Host(`traefik.{{ common_tld }}`)"
          traefik.http.routers.api.middlewares: "auth@file"
        published_ports:
          - 80:80
          - 443:443
          - 8080:8080
        networks:
          - name: "{{ docker_network }}"
