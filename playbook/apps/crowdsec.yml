---

- hosts: 

  vars:
    application: crowdsec

    docker_network: 

    crowdsec_bouncer_key: !vault |
      $ANSIBLE_VAULT;1.1;AES256
      37326565353433666162343833666131623732643662373466386637306630623730616133313436
      3536306435643730623539353435356539313166386166630a666532346338373564353635313035
      32393363386333633033613162633438326236323033613035393662386136333333366534306432
      3130613937643531300a323766303037303964323034373034336561346662363436666562613133
      32343363316431376239663562643436663730376530383837303666633064316438373161636563
      6230333835623437623033643334386362376130613633386231

    DISCORD_WEBHOOK: !vault |
      $ANSIBLE_VAULT;1.1;AES256
      35636662383938636332316232646136646666336230656530626266386132663162366232323461
      3432353437323932666137613362386638336537383832630a313436363464653265616236303136
      62306461643833663166636338333530663237623132656337656434306139356464663664626366
      3533316536653439610a663764623266373863626263396431303466353631313261366531306134
      66373035363339393038373362653764626165313635663934303864333663383364653137373765
      31303731353565383136663065376565613437633433363361366138616337326666666361373035
      37373264613034623562303065623930323433613533623163623934633837616231636138333865
      39373737633031353861383037323066613562613165663934313438343265633034373730656364
      36303236333466643435316330356332333430343838656636626666396430663066303737646530
      6239353731656165646635346139653937343666663166623539

    MAPQUEST_API_KEY: !vault |
      $ANSIBLE_VAULT;1.1;AES256
      36653666323536663362393965356131393839393063356137643461633138353835613731373561
      3734373130393930323064653835343536633663663366360a333562386236626134346130393564
      39633234373638343737313434616233643661313331666237306539356232363361666534643163
      6534393434313261390a643263663666636139396531366561636332363236643736373339323337
      61353036363865313963306439313032346366646238386566653865393438633161383965623332
      3532626334303162316338383935356164303130326261643230


  handlers:
    - name: Restart
      community.docker.docker_container:
        name: "{{ application }}"
        restart: true
        comparisons:
          '*': ignore

  tasks:
    - name: Create config folder
      ansible.builtin.file:
        path: "{{ config_directory }}"
        state: directory
        owner: "{{ common_user }}"
        group: "{{ common_group }}"
        mode: "0771"

    - name: Create config.yaml.local
      ansible.builtin.copy:
        content: |
          common:
            log_level: info
          config_paths:
            notification_dir: /etc/crowdsec/notifications.local/
          api:
            server:
              log_level: warn
        dest: "{{ config_directory }}/config.yaml.local"
        owner: "{{ common_root_id }}"
        group: "{{ common_root_group }}"
        mode: "0644"
      notify: Restart

    - name: Create acquis.yaml
      ansible.builtin.copy:
        content: |
          ---
          filenames:
            - /var/log/crowdsec/traefik.log
            - /var/log/traefik/traefik.log
          labels:
            type: traefik
          ---
          filenames:
            - /var/log/crowdsec/authelia.log
          labels:
            type: authelia
          ---
          filenames:
            - /var/log/auth.log
            - /var/log/syslog
          labels:
            type: syslog
        dest: "{{ config_directory }}/acquis.yaml"
        owner: "{{ common_root_id }}"
        group: "{{ common_root_group }}"
        mode: "0644"
      notify: Restart

    - name: Create discord.yaml
      ansible.builtin.copy:
        content: |
          type: http
          name: discord
          log_level: info

          {% raw %}
          format: |
            {
              "content": null,
              "embeds": [
                {{range . -}}
                {{$alert := . -}}
                {{range .Decisions -}}
                {{if $alert.Source.Cn -}}
                {
                  "title": "{{$alert.MachineID}}: {{.Scenario}}",
                  "description": ":flag_{{ $alert.Source.Cn | lower }}: {{$alert.Source.IP}} will get a {{.Type}} for the next {{.Duration}}. <https://www.shodan.io/host/{{$alert.Source.IP}}>",
                  "url": "https://db-ip.com/{{$alert.Source.IP}}",
                  "color": "16711680",
                  "image": {
                    "url": "https://www.mapquestapi.com/staticmap/v5/map?center={{$alert.Source.Latitude}},{{$alert.Source.Longitude}}&size=500,300&key={{ MAPQUEST_API_KEY }}"
                  }
                }
                {{end}}
                {{if not $alert.Source.Cn -}}
                {
                  "title": "{{$alert.MachineID}}: {{.Scenario}}",
                  "description": ":pirate_flag: {{$alert.Source.IP}} will get a {{.Type}} for the next {{.Duration}}. <https://www.shodan.io/host/{{$alert.Source.IP}}>",
                  "url": "https://db-ip.com/{{$alert.Source.IP}}",
                  "color": "16711680"
                }
                {{end}}
                {{end -}}
                {{end -}}
              ]
            }
          {% endraw %}

          url: "{{ DISCORD_WEBHOOK }}"
          method: POST
          headers:
            Content-Type: application/json
        dest: "{{ config_directory }}/discord.yaml"
        owner: "{{ common_root_id }}"
        group: "{{ common_root_group }}"
        mode: "0644"
      notify: Restart

    - name: Create profiles.yaml.local
      ansible.builtin.copy:
        content: |
          name: default_ip_remediation

          debug: false
         
          filters:
            - Alert.Remediation == true && Alert.GetScope() == "Ip"
          
          decisions:
            - type: ban
              duration: 8766h
          
          notifications:
            - discord
          
          on_success: break
          on_failure: break
        dest: "{{ config_directory }}/profiles.yaml.local"
        owner: "{{ common_root_id }}"
        group: "{{ common_root_group }}"
        mode: "0644"
      notify: Restart

    - name: Create container
      community.docker.docker_container:
        name: "{{ application }}"
        image: crowdsecurity/crowdsec:latest
        state: started
        restart_policy: always
        published_ports:
          - "8383:8080"
        volumes:
          - "{{ config_directory }}/acquis.yaml:/etc/crowdsec/acquis.yaml"

          - "{{ config_directory }}/config.yaml.local:/etc/crowdsec/config.yaml.local"
          - "{{ config_directory }}/profiles.yaml.local:/etc/crowdsec/profiles.yaml.local"

          - "{{ config_directory }}/discord.yaml:/etc/crowdsec/notifications.local/discord.yaml"

          - "{{ config_directory}}/config:/etc/crowdsec"
          - "{{ config_directory }}/data:/var/lib/crowdsec/data"

          - "{{ common_directory }}/authelia/logs/authelia.log:/var/log/authelia.log:ro"
          - "{{ common_directory }}/traefik/logs:/var/log/traefik:ro"
          - "{{ common_directory }}/crowdsec/logs:/var/log/crowdsec:ro"
          - /var/log/auth.log:/var/log/auth.log:ro
          - /var/log/syslog:/var/log/syslog:ro
        env:
          TZ: "{{ common_timezone }}"
          PGID: "{{ common_user_id | string }}"
          COLLECTIONS: |-
            {{
              [
                "crowdsecurity/traefik",
                "crowdsecurity/http-cve",
                "LePresidente/authelia",
              ] | join(' ')
            }}
        networks:
          - name: "{{ docker_network }}"
        labels:
          '{
            "chadburn.enabled": "true",
            "chadburn.job-exec.{{ application }}-hub.user": "0",
            "chadburn.job-exec.{{ application }}-hub.schedule": "@every 1h",
            "chadburn.job-exec.{{ application }}-hub.command": "sh -c \"cscli hub update && cscli hub upgrade\"",
            "chadburn.job-exec.{{ application }}-hub.tty": "false",
            "chadburn.job-exec.{{ application }}-hub.no-overlap": "true"
          }'

    - name: Create traefik bouncer container
      community.docker.docker_container:
        name: "bouncer-traefik"
        image: fbonalair/traefik-crowdsec-bouncer:latest
        state: started
        restart_policy: unless-stopped
        env:
          CROWDSEC_BOUNCER_API_KEY: "{{ crowdsec_bouncer_key }}"
          CROWDSEC_AGENT_HOST: crowdsec:8080
          GIN_MODE: release
        networks:
          - name: "{{ docker_network }}"
