---

- hosts: 

  vars:
    application: crowdsec

    docker_network: 

    crowdsec_bouncer_key:
      traefik: !vault |
        $ANSIBLE_VAULT;1.1;AES256
        65326430326136633238326137653839646135653932323331626334333635653237303861373531
        3133663737366431396135386331346230633231353431610a663933396336393738316134336431
        39303432616533343566633038656431626235313731323236336437373065343336393066343565
        6263663537623539300a663934363733393431366366386365326465393930613366353362303465
        66303934306632353438373763633339653837383537376339623063663734616464373738353833
        3539626333383565346136613632346334313564643136626363

    SLACK_WEBHOOK: !vault |
      $ANSIBLE_VAULT;1.1;AES256
      35326630306461616261666463633063653065303034393230393730316662323663396633336664
      3262303339353131333431336632303533303533353734300a613764613265336266303930613431
      62643734653236643938623231383933316335666464303933653764643334633532383333303165
      3234633432613033310a633534313139343438646565306239346266366262306534376166383466
      31333165303936626437373062643662633266633964653064393437373335376564356533613762
      65636535316537306666653564316561346437353838363237613738363634666332613437626536
      64366534663261323437316336333231663431353565326532323536386564353864303934613935
      62656237396334346239353935396164353139656536326435343432323161393735323161666130
      6538

  handlers:
    - name: Restart
      community.docker.docker_container:
        name: "{{ application }}"
        restart: true
        comparisons:
          '*': ignore

  tasks:

    - name: Create config folder
      ansible.builtin.file:
        path: "{{ config_directory }}"
        state: directory
        owner: "{{ common_user }}"
        group: "{{ common_group }}"
        mode: "0771"

    - name: Create config.yaml.local
      ansible.builtin.copy:
        content: |
          common:
            log_level: info
          config_paths:
            notification_dir: /etc/crowdsec/notifications.local/
          api:
            server:
              log_level: warn
        dest: "{{ config_directory }}/config.yaml.local"
        owner: "{{ common_root_id }}"
        group: "{{ common_root_group }}"
        mode: "0644"
      notify: Restart

    - name: Create acquis.yaml
      ansible.builtin.copy:
        content: |
          ---
          filenames:
            - /var/log/traefik/access.log
            - /var/log/traefik/traefik.log
          labels:
            type: traefik
          ---
          filenames:
            - /var/log/authelia.log
          labels:
            type: authelia
          ---
          filenames:
            - /var/log/kern.log
            - /var/log/ufw.log
            - /var/log/mail.log
            - /var/log/auth.log
          labels:
            type: syslog
        dest: "{{ config_directory }}/acquis.yaml"
        owner: "{{ common_root_id }}"
        group: "{{ common_root_group }}"
        mode: "0644"
      notify: Restart


    - name: Create email.yaml
      ansible.builtin.copy:
        content: |
          type: email
          name: email

          log_level: info

          {% raw %}
          format: |
            {{ range . -}}
            {{ $alert := . -}}

            {{ range .Decisions -}}
            <p><a href=https://www.shodan.io/host/{{ .Value}}>{{ .Value}}</a> will get <b>{{ .Type}}</b> for next <b>{{ .Duration}}</b> for triggering <b>{{ .Scenario}}</b>.</p>
            {{ end -}}

            <ul>
            {{ range .Events -}}
            {{ range .Meta }}{{ if eq .Key "traefik_router_name"}}<li>{{ .Value}}: {{ end }}{{ end }}{{ range .Meta }}{{ if eq .Key "http_path" }}{{ .Value }}{{ end }}{{ end }}</li>
            {{ end -}}
            </ul>

            {{ end -}}
          {% endraw %}

          smtp_host: {{ common_email_host }}
          smtp_username: {{ common_smtp_username }}
          smtp_password: {{ common_smtp_password }}
          smtp_port: {{ common_email_port }}
          sender_email: alerts{{ common_email_to }}
          receiver_emails:
           - {{ application }}{{ common_email_to }}
          encryption_type: starttls
          auth_type: login
          email_subject: CrowdSec Notification

          timeout: 20s
        dest: "{{ config_directory }}/email.yaml"
        owner: "{{ common_root_id }}"
        group: "{{ common_root_group }}"
        mode: "0644"
      notify: Restart

    - name: Create slack.yaml
      ansible.builtin.copy:
        content: |
          type: slack
          name: slack

          log_level: info

          {% raw %}
          format: |
            {{ range . -}}
            {{ $alert := . -}}

            {{ range .Decisions -}}
            {{if $alert.Source.Cn -}}
            :flag-{{$alert.Source.Cn}}: <https://www.whois.com/whois/{{.Value}}|{{.Value}}> will get {{.Type}} for next {{.Duration}} for triggering {{.Scenario}} on machine '{{$alert.MachineID}}'. <https://app.crowdsec.net/cti/{{.Value}}|CrowdSec CTI>{{end}}
            {{if not $alert.Source.Cn -}}
            :pirate_flag: <https://www.whois.com/whois/{{.Value}}|{{.Value}}> will get {{.Type}} for next {{.Duration}} for triggering {{.Scenario}} on machine '{{$alert.MachineID}}'.  <https://app.crowdsec.net/cti/{{.Value}}|CrowdSec CTI>{{end}}
            {{ end -}}
            {{ end -}}
          {% endraw %}

          webhook: {{ SLACK_WEBHOOK }}
        dest: "{{ config_directory }}/slack.yaml"
        owner: "{{ common_root_id }}"
        group: "{{ common_root_group }}"
        mode: "0644"
      notify: Restart

    - name: Create profiles.yaml.local
      ansible.builtin.copy:
        content: |
          name: default_ip_remediation

          debug: false

          filters:
            - Alert.Remediation == true && Alert.GetScope() == "Ip"

          decisions:
            - type: ban
              duration: 8766h

          notifications:
            - email
            - slack

          on_success: break
          on_failure: break
        dest: "{{ config_directory }}/profiles.yaml.local"
        owner: "{{ common_root_id }}"
        group: "{{ common_root_group }}"
        mode: "0644"
      notify: Restart

    - name: Create my-whitelists.yaml
      ansible.builtin.copy:
        content: |
          name: crowdsecurity/my-whitelists
          description: "Custom Whitelist"
          whitelist:
            reason: "my custom whitelists"
            expression:
              -
                evt.Meta.http_status == '403' && evt.Parsed.traefik_router_name startsWith 'mattermost' && (evt.Meta.http_path contains '/api/v4/')
              -
                evt.Meta.http_status == '403' && evt.Parsed.traefik_router_name startsWith 'home-assistant' && (evt.Meta.http_path contains '/api/calendars/' || evt.Meta.http_path contains '/api/camera_proxy_stream/')
              -
                evt.Meta.http_status == '403' && evt.Parsed.traefik_router_name startsWith 'qbittorrent' && (evt.Meta.http_path contains '/favicon.ico' || evt.Meta.http_path contains '/api/v2/')
              -
                evt.Parsed.traefik_router_name startsWith 'actualbudget' && (evt.Meta.http_path contains '/data/migrations/' || evt.Meta.http_path == '/sync/sync')
              -
                evt.Parsed.traefik_router_name startsWith 'immich-server' && (evt.Meta.http_path startsWith '/api')
        dest: "{{ config_directory }}/my-whitelists.yaml"
        owner: "{{ common_root_id }}"
        group: "{{ common_root_group }}"
        mode: "0644"
      notify: Restart
    
    - name: Create container
      community.docker.docker_container:
        name: "{{ application }}"
        image: crowdsecurity/crowdsec:v1.6.0
        state: started
        restart_policy: always
        published_ports:
          - 8080:8080
        volumes:
          - "{{ config_directory }}/acquis.yaml:/etc/crowdsec/acquis.yaml"

          - "{{ config_directory }}/config.yaml.local:/etc/crowdsec/config.yaml.local"
          - "{{ config_directory }}/profiles.yaml.local:/etc/crowdsec/profiles.yaml.local"

          - "{{ config_directory }}/email.yaml:/etc/crowdsec/notifications.local/email.yaml"
          - "{{ config_directory }}/slack.yaml:/etc/crowdsec/notifications.local/slack.yaml"

          - "{{ config_directory }}/my-whitelists.yaml:/etc/crowdsec/parsers/s02-enrich/my-whitelists.yaml"

          - "{{ config_directory }}/data:/var/lib/crowdsec/data"
          - "{{ config_directory }}/config:/etc/crowdsec"

          - "{{ common_directory }}/traefik/logs:/var/log/traefik:ro"
          - "{{ common_directory }}/log/authelia.log:ro"

          - /var/log/kern.log:/var/log/kern.log:ro
          - /var/log/ufw.log:/var/log/ufw.log:ro
          - /var/log/mail.log:/var/log/mail.log:ro
          - /var/log/auth.log:/var/log/auth.log:ro

        env:
          TZ: "{{ common_timezone }}"
          PUID: "{{ common_user_id | string }}"
          PGID: "{{ common_group_id | string }}"

          COLLECTIONS: |-
            {{
              [
                "crowdsecurity/traefik",
                "crowdsecurity/http-cve",
                "crowdsecurity/iptables",
                "crowdsecurity/linux-lpe",
                "crowdsecurity/linux",
                "LePresidente/authelia",
                "LePresidente/overseerr",
              ] | join(' ')
            }}

        networks:
          - name: "{{ docker_network }}"
        labels:
          '{
            "chadburn.enabled": "true",
            "chadburn.job-exec.{{ application }}-hub.user": "0",
            "chadburn.job-exec.{{ application }}-hub.schedule": "@every 1h",
            "chadburn.job-exec.{{ application }}-hub.command": "sh -c \"cscli hub update && cscli hub upgrade\"",
            "chadburn.job-exec.{{ application }}-hub.tty": "false",
            "chadburn.job-exec.{{ application }}-hub.no-overlap": "true"
          }'
 
    - name: Create traefik bouncer container
      community.docker.docker_container:
        name: "{{ application }}-traefik-bouncer"
        image: fbonalair/traefik-crowdsec-bouncer:0.5.0
        state: started
        restart_policy: always
        env:
          CROWDSEC_BOUNCER_API_KEY: "{{ crowdsec_bouncer_key.traefik }}"
          CROWDSEC_AGENT_HOST: crowdsec:8080
          GIN_MODE: release
       
        networks:
          - name: "{{ docker_network }}"



